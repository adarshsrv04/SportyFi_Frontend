
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://grtqfffyhtblqkcmqifb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdydHFmZmZ5aHRibHFrY21xaWZiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE5NzU3NDIsImV4cCI6MjA1NzU1MTc0Mn0.14KLFvI6YFvc2DuJ2CSrKVaNlqGyAmJnXrj_1usN69Y";
// db.grtqfffyhtblqkcmqifb.supabase.co ----- UE43GE.zVvs@sQ#
// Configure the Supabase client with persistence options
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      storageKey: 'sportyfi-auth-token',
      autoRefreshToken: true,
      detectSessionInUrl: true,
      flowType: 'pkce'
    }
  }
);

// Add custom type helpers
export type Tables = Database['public']['Tables'];
export type Match = Tables['matches']['Row'];
export type Participant = Tables['participants']['Row'];
export type Profile = Tables['profiles']['Row'];
export type ParticipantWithProfile = Participant & { profile: Profile | null };

// Add new type helpers for venues and bookings
export type Venue = Tables['venues']['Row'];
export type VenueSport = Tables['venue_sports']['Row'];
export type VenueAmenity = Tables['venue_amenities']['Row'];
export type VenueImage = Tables['venue_images']['Row'];
export type Booking = Tables['bookings']['Row'];
export type VenueRequest = Tables['venue_requests']['Row'];

// Complete venue type with relations
export type VenueWithRelations = Venue & {
  // sports?: VenueSport[];
  // amenities?: VenueAmenity[];
  images?: VenueImage[];
};

// Profile avatar helpers
export async function uploadAvatar(userId: string, file: File) {
  const fileExt = file.name.split('.').pop();
  const fileName = `${userId}-${Math.random().toString(36).substring(2, 15)}.${fileExt}`;
  const filePath = `${fileName}`;

  const { error: uploadError } = await supabase.storage
    .from('profiles')
    .upload(filePath, file, { upsert: true });

  if (uploadError) {
    throw uploadError;
  }

  const { data } = supabase.storage
    .from('profiles')
    .getPublicUrl(filePath);

  return data.publicUrl;
}

export async function updateProfile(userId: string, updates: Partial<Profile>) {
  const { error } = await supabase
    .from('profiles')
    .update(updates)
    .eq('id', userId);

  if (error) {
    throw error;
  }
}
